#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

DIR="$(realpath "$(dirname "$0")")"/..

# if -r, enable remote support
param1=""
while getopts 'r' OPTION; do
    case "$OPTION" in
        r)
            # Generates a shell inside the ROS container, with ROS_MASTER_URI set
            # to the Jetson.

            lookup_addr () {
                # Looking up addresses is weirdly almost impossible in bash in a
                # way that respects /etc/hosts and acts exactly as the standard
                # system resolver would. Shell out to C to do the lookup instead.
                C_FILE=$(mktemp --suffix=.c)
                cat > $C_FILE <<EOF
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>

int main(int argc, char **argv) {
    struct addrinfo *result;
    if (getaddrinfo(argv[1], NULL, NULL, &result)) {
        fprintf(stderr, "lookup error on %s\n", argv[1]);
        return 1;
    }

    struct sockaddr_in *addr = (struct sockaddr_in *)result->ai_addr;
    const unsigned char *ip_data = (const unsigned char *)&addr->sin_addr.s_addr;

    for (int i = 0; i < 4; i++)
        printf("%s%d", i == 0 ? "" : ".", ip_data[i]);
}
EOF
            BUILD_FILE=$(mktemp)
            cc -o $BUILD_FILE $C_FILE
            $BUILD_FILE "$@"

            rm $BUILD_FILE $C_FILE
            }

            JETSON_ADDRESS=$(lookup_addr jetson)
            MY_ADDRESS=$(ip route get $JETSON_ADDRESS | sed 's/.* src //;s/ .*//;2,$d')

            echo "Add '129.138.xxx.xxx  jetson' to /etc/hosts for network support"
            param1="-e ROS_IP=$MY_ADDRESS -e ROS_MASTER_URI=http://jetson:11311"
        ;;
    esac
done

param2=""
for ((c=32; c>=0; c--)); do
    file="/dev/input/js$c"
    if [ -e $file ]; then
        param2="--device=$file"
    fi
done

params=(
    --rm
    -it
    --net=host
    -v $DIR:$DIR
    -e DISPLAY
    -v /tmp/.X11-unix:/tmp/.X11-unix:rw
    -v /dev:/dev:rw
    --device-cgroup-rule "c 81:* rmw"
    --device-cgroup-rule "c 189:* rmw"
    --name=lunabotics-term
    $param1
    $param2
)

sudo docker build "$DIR/ros" -t lunabotics-2023-ros
sudo docker run \
    "${params[@]}" \
    lunabotics-2023-ros \
    sh -c "
    cd $PWD
    export HOME="$HOME"
    export PS1='\u@\h:\w\$ '
    [ -e $DIR/ros/catkin_ws/devel/setup.sh ] && . $DIR/ros/catkin_ws/devel/setup.sh
    bash
    "

# ROS might create files owned by root here; it'll cause all kinds of
# problems with git.
sudo chown -R "$(id -u):$(id -g)" "$DIR"
