// Generated by gencpp from file se2_navigation_msgs/SendControllerCommandSrvRequest.msg
// DO NOT EDIT!


#ifndef SE2_NAVIGATION_MSGS_MESSAGE_SENDCONTROLLERCOMMANDSRVREQUEST_H
#define SE2_NAVIGATION_MSGS_MESSAGE_SENDCONTROLLERCOMMANDSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <se2_navigation_msgs/ControllerCommandMsg.h>

namespace se2_navigation_msgs
{
template <class ContainerAllocator>
struct SendControllerCommandSrvRequest_
{
  typedef SendControllerCommandSrvRequest_<ContainerAllocator> Type;

  SendControllerCommandSrvRequest_()
    : command()  {
    }
  SendControllerCommandSrvRequest_(const ContainerAllocator& _alloc)
    : command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::se2_navigation_msgs::ControllerCommandMsg_<ContainerAllocator>  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendControllerCommandSrvRequest_

typedef ::se2_navigation_msgs::SendControllerCommandSrvRequest_<std::allocator<void> > SendControllerCommandSrvRequest;

typedef boost::shared_ptr< ::se2_navigation_msgs::SendControllerCommandSrvRequest > SendControllerCommandSrvRequestPtr;
typedef boost::shared_ptr< ::se2_navigation_msgs::SendControllerCommandSrvRequest const> SendControllerCommandSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator1> & lhs, const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator1> & lhs, const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace se2_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50569f8fcb12c151e963a874cc25a053";
  }

  static const char* value(const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50569f8fcb12c151ULL;
  static const uint64_t static_value2 = 0xe963a874cc25a053ULL;
};

template<class ContainerAllocator>
struct DataType< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "se2_navigation_msgs/SendControllerCommandSrvRequest";
  }

  static const char* value(const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request\n"
"ControllerCommandMsg command                          # Query, maybe useful for the future\n"
"\n"
"================================================================================\n"
"MSG: se2_navigation_msgs/ControllerCommandMsg\n"
"\n"
"int8 START_TRACKING=0\n"
"int8 STOP_TRACKING=1\n"
"\n"
"int8 command\n"
;
  }

  static const char* value(const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendControllerCommandSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::se2_navigation_msgs::SendControllerCommandSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    s << std::endl;
    Printer< ::se2_navigation_msgs::ControllerCommandMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SE2_NAVIGATION_MSGS_MESSAGE_SENDCONTROLLERCOMMANDSRVREQUEST_H
