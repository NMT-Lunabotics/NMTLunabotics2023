// Generated by gencpp from file se2_grid_map_generator_msgs/AddNanRequest.msg
// DO NOT EDIT!


#ifndef SE2_GRID_MAP_GENERATOR_MSGS_MESSAGE_ADDNANREQUEST_H
#define SE2_GRID_MAP_GENERATOR_MSGS_MESSAGE_ADDNANREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <se2_grid_map_generator_msgs/Polygon2D.h>

namespace se2_grid_map_generator_msgs
{
template <class ContainerAllocator>
struct AddNanRequest_
{
  typedef AddNanRequest_<ContainerAllocator> Type;

  AddNanRequest_()
    : polygon()  {
    }
  AddNanRequest_(const ContainerAllocator& _alloc)
    : polygon(_alloc)  {
  (void)_alloc;
    }



   typedef  ::se2_grid_map_generator_msgs::Polygon2D_<ContainerAllocator>  _polygon_type;
  _polygon_type polygon;





  typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddNanRequest_

typedef ::se2_grid_map_generator_msgs::AddNanRequest_<std::allocator<void> > AddNanRequest;

typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::AddNanRequest > AddNanRequestPtr;
typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::AddNanRequest const> AddNanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator1> & lhs, const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.polygon == rhs.polygon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator1> & lhs, const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace se2_grid_map_generator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4056b8453382bcc22d3fae7b7a4ff29a";
  }

  static const char* value(const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4056b8453382bcc2ULL;
  static const uint64_t static_value2 = 0x2d3fae7b7a4ff29aULL;
};

template<class ContainerAllocator>
struct DataType< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "se2_grid_map_generator_msgs/AddNanRequest";
  }

  static const char* value(const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request\n"
"se2_grid_map_generator_msgs/Polygon2D polygon\n"
"\n"
"================================================================================\n"
"MSG: se2_grid_map_generator_msgs/Polygon2D\n"
"se2_grid_map_generator_msgs/Position2D[] vertices\n"
"================================================================================\n"
"MSG: se2_grid_map_generator_msgs/Position2D\n"
"std_msgs/Float64 x\n"
"std_msgs/Float64 y\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.polygon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddNanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::se2_grid_map_generator_msgs::AddNanRequest_<ContainerAllocator>& v)
  {
    s << indent << "polygon: ";
    s << std::endl;
    Printer< ::se2_grid_map_generator_msgs::Polygon2D_<ContainerAllocator> >::stream(s, indent + "  ", v.polygon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SE2_GRID_MAP_GENERATOR_MSGS_MESSAGE_ADDNANREQUEST_H
