// Generated by gencpp from file se2_grid_map_generator_msgs/CircularObstacle.msg
// DO NOT EDIT!


#ifndef SE2_GRID_MAP_GENERATOR_MSGS_MESSAGE_CIRCULAROBSTACLE_H
#define SE2_GRID_MAP_GENERATOR_MSGS_MESSAGE_CIRCULAROBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <se2_grid_map_generator_msgs/Circle2D.h>
#include <std_msgs/String.h>
#include <std_msgs/Float64.h>

namespace se2_grid_map_generator_msgs
{
template <class ContainerAllocator>
struct CircularObstacle_
{
  typedef CircularObstacle_<ContainerAllocator> Type;

  CircularObstacle_()
    : circle()
    , layers()
    , values()  {
    }
  CircularObstacle_(const ContainerAllocator& _alloc)
    : circle(_alloc)
    , layers(_alloc)
    , values(_alloc)  {
  (void)_alloc;
    }



   typedef  ::se2_grid_map_generator_msgs::Circle2D_<ContainerAllocator>  _circle_type;
  _circle_type circle;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::String_<ContainerAllocator> >> _layers_type;
  _layers_type layers;

   typedef std::vector< ::std_msgs::Float64_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Float64_<ContainerAllocator> >> _values_type;
  _values_type values;





  typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct CircularObstacle_

typedef ::se2_grid_map_generator_msgs::CircularObstacle_<std::allocator<void> > CircularObstacle;

typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::CircularObstacle > CircularObstaclePtr;
typedef boost::shared_ptr< ::se2_grid_map_generator_msgs::CircularObstacle const> CircularObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator1> & lhs, const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.circle == rhs.circle &&
    lhs.layers == rhs.layers &&
    lhs.values == rhs.values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator1> & lhs, const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace se2_grid_map_generator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3e815e4c24596dee9474400db6e2dc7";
  }

  static const char* value(const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3e815e4c24596deULL;
  static const uint64_t static_value2 = 0xe9474400db6e2dc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "se2_grid_map_generator_msgs/CircularObstacle";
  }

  static const char* value(const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "se2_grid_map_generator_msgs/Circle2D circle\n"
"std_msgs/String[] layers\n"
"std_msgs/Float64[] values\n"
"================================================================================\n"
"MSG: se2_grid_map_generator_msgs/Circle2D\n"
"se2_grid_map_generator_msgs/Position2D center\n"
"std_msgs/Float64 radius\n"
"================================================================================\n"
"MSG: se2_grid_map_generator_msgs/Position2D\n"
"std_msgs/Float64 x\n"
"std_msgs/Float64 y\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.circle);
      stream.next(m.layers);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CircularObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::se2_grid_map_generator_msgs::CircularObstacle_<ContainerAllocator>& v)
  {
    s << indent << "circle: ";
    s << std::endl;
    Printer< ::se2_grid_map_generator_msgs::Circle2D_<ContainerAllocator> >::stream(s, indent + "  ", v.circle);
    s << indent << "layers[]" << std::endl;
    for (size_t i = 0; i < v.layers.size(); ++i)
    {
      s << indent << "  layers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.layers[i]);
    }
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "    ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SE2_GRID_MAP_GENERATOR_MSGS_MESSAGE_CIRCULAROBSTACLE_H
