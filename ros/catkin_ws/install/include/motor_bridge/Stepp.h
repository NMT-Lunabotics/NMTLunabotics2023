// Generated by gencpp from file motor_bridge/Stepp.msg
// DO NOT EDIT!


#ifndef MOTOR_BRIDGE_MESSAGE_STEPP_H
#define MOTOR_BRIDGE_MESSAGE_STEPP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_bridge
{
template <class ContainerAllocator>
struct Stepp_
{
  typedef Stepp_<ContainerAllocator> Type;

  Stepp_()
    : rpm(0)
    , direction(0)
    , motor(0)  {
    }
  Stepp_(const ContainerAllocator& _alloc)
    : rpm(0)
    , direction(0)
    , motor(0)  {
  (void)_alloc;
    }



   typedef int32_t _rpm_type;
  _rpm_type rpm;

   typedef int32_t _direction_type;
  _direction_type direction;

   typedef int32_t _motor_type;
  _motor_type motor;





  typedef boost::shared_ptr< ::motor_bridge::Stepp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_bridge::Stepp_<ContainerAllocator> const> ConstPtr;

}; // struct Stepp_

typedef ::motor_bridge::Stepp_<std::allocator<void> > Stepp;

typedef boost::shared_ptr< ::motor_bridge::Stepp > SteppPtr;
typedef boost::shared_ptr< ::motor_bridge::Stepp const> SteppConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_bridge::Stepp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_bridge::Stepp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motor_bridge::Stepp_<ContainerAllocator1> & lhs, const ::motor_bridge::Stepp_<ContainerAllocator2> & rhs)
{
  return lhs.rpm == rhs.rpm &&
    lhs.direction == rhs.direction &&
    lhs.motor == rhs.motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motor_bridge::Stepp_<ContainerAllocator1> & lhs, const ::motor_bridge::Stepp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motor_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motor_bridge::Stepp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_bridge::Stepp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_bridge::Stepp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_bridge::Stepp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_bridge::Stepp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_bridge::Stepp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_bridge::Stepp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43447b26b2e072455822d7bf86b01b32";
  }

  static const char* value(const ::motor_bridge::Stepp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43447b26b2e07245ULL;
  static const uint64_t static_value2 = 0x5822d7bf86b01b32ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_bridge::Stepp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_bridge/Stepp";
  }

  static const char* value(const ::motor_bridge::Stepp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_bridge::Stepp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Stepper Control Message\n"
"\n"
"# RPM (0 = stop, 1024 = full speed)\n"
"int32 rpm\n"
"\n"
"# Direction (0 = stop, 1 = forward, 2 = backward)\n"
"int32 direction\n"
"\n"
"# Which motor (0 = both, 1 = left, 2 = right)\n"
"int32 motor\n"
"\n"
;
  }

  static const char* value(const ::motor_bridge::Stepp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_bridge::Stepp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rpm);
      stream.next(m.direction);
      stream.next(m.motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Stepp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_bridge::Stepp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_bridge::Stepp_<ContainerAllocator>& v)
  {
    s << indent << "rpm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rpm);
    s << indent << "direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction);
    s << indent << "motor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_BRIDGE_MESSAGE_STEPP_H
