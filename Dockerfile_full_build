FROM ros:noetic-ros-core

RUN apt-get update -y

RUN DEBIAN_FRONTEND='noninteractive' apt-get install -y libpcl-dev
# Standard tools
RUN apt-get install -y \
    clang \
    make \
    gcc \
    g++ \
    inetutils-ping \
    net-tools \
    git \
    tmux \
    python3-catkin-tools \
    libeigen3-dev

# 2. Install ROS packages from apt.
RUN apt-get install -y \
    ros-noetic-roscpp \
    ros-noetic-eigen-conversions \
    ros-noetic-gazebo-ros \
    ros-noetic-grid-map-core \
    ros-noetic-grid-map-ros \
    ros-noetic-joint-state-publisher \
    ros-noetic-move-base \
    ros-noetic-ompl \
    ros-noetic-realsense2-camera \
    ros-noetic-robot-pose-ekf \
    ros-noetic-robot-state-publisher \
    ros-noetic-rosmon \
    ros-noetic-rviz \
    ros-noetic-tf2-tools \
    ros-noetic-usb-cam \
    ros-noetic-compressed-image-transport \
    ros-noetic-rosmon \
    ros-noetic-pcl-ros \
    ros-noetic-tf-conversions \
    ros-noetic-grid-map-filters \
    ros-noetic-grid-map-rviz-plugin \
    ros-noetic-xacro \
    ros-noetic-teb-local-planner

# Install visual and debugging tools
RUN apt-get install -y \
    ros-noetic-rosbag \
    ros-noetic-plotjuggler \
    ros-noetic-rqt-tf-tree \
    ros-noetic-rqt-plot \
    ros-noetic-rqt-image-view 

# Install librealsense
# To avoid waiting for input during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Builder dependencies installation
RUN apt-get update \
    && apt-get install -qq -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libssl-dev \
    libusb-1.0-0-dev \
    pkg-config \
    libgtk-3-dev \
    libglfw3-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \    
    curl \
    python3 \
    python3-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Download sources
WORKDIR /usr/src
RUN curl https://codeload.github.com/IntelRealSense/librealsense/tar.gz/refs/tags/v$LIBRS_VERSION -o librealsense.tar.gz 
RUN tar -zxf librealsense.tar.gz \
    && rm librealsense.tar.gz 
RUN ln -s /usr/src/librealsense-$LIBRS_VERSION /usr/src/librealsense

# Build and install
RUN cd /usr/src/librealsense \
    && mkdir build && cd build \
    && cmake \
    -DCMAKE_C_FLAGS_RELEASE="${CMAKE_C_FLAGS_RELEASE} -s" \
    -DCMAKE_CXX_FLAGS_RELEASE="${CMAKE_CXX_FLAGS_RELEASE} -s" \
    -DCMAKE_INSTALL_PREFIX=/opt/librealsense \    
    -DBUILD_GRAPHICAL_EXAMPLES=OFF \
    -DBUILD_PYTHON_BINDINGS:bool=true \
    -DCMAKE_BUILD_TYPE=Release ../ \
    && make -j$(($(nproc)-1)) all \
    && make install 

######################################
#   librealsense Base Image Stage    #
######################################
FROM ${BASE_IMAGE} as librealsense

# Copy binaries from builder stage
COPY --from=librealsense-builder /opt/librealsense /usr/local/
COPY --from=librealsense-builder /usr/lib/python3/dist-packages/pyrealsense2 /usr/lib/python3/dist-packages/pyrealsense2
COPY --from=librealsense-builder /usr/src/librealsense/config/99-realsense-libusb.rules /etc/udev/rules.d/
COPY --from=librealsense-builder /usr/src/librealsense/config/99-realsense-d4xx-mipi-dfu.rules /etc/udev/rules.d/
ENV PYTHONPATH=$PYTHONPATH:/usr/local/lib

# Install dep packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends \	
    libusb-1.0-0 \
    udev \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Shows a list of connected Realsense devices
CMD [ "rs-enumerate-devices", "--compact" ]

COPY ros/scripts /ros/scripts
COPY ros/catkin_ws/.catkin_workspace /ros/catkin_ws/.catkin_workspace

# Incremental-ish builds to avoid full rebuilds. Keep these in order
# from least to most often changed.
# Uncomment the ones to be compiled
COPY ros/catkin_ws/src/kindr /ros/catkin_ws/src/kindr
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/kindr_ros /ros/catkin_ws/src/kindr_ros
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/message_logger /ros/catkin_ws/src/message_logger
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/realsense-ros /ros/catkin_ws/src/realsense-ros
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/elevation_mapping /ros/catkin_ws/src/elevation_mapping
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/elevation_mapping_demos /ros/catkin_ws/src/elevation_mapping_demos
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY can /can

COPY ros/catkin_ws/src/motor_bridge /ros/catkin_ws/src/motor_bridge
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/pad_send /ros/catkin_ws/src/pad_send
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/david_navigation /ros/catkin_ws/src/david_navigation
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

COPY ros/catkin_ws/src/david_config /ros/catkin_ws/src/david_config
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

# Build any packages not listed above.
RUN rm -rf /ros/catkin_ws/src
COPY ros/catkin_ws/src /ros/catkin_ws/src
RUN cd /ros/catkin_ws && /ros_entrypoint.sh catkin build

# Add /catkin_ws to the ROS environment.
COPY ros/ros_entrypoint.sh /ros_entrypoint.sh
